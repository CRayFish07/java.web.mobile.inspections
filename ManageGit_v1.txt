### Create the remote named all
1) git remote add all https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git

$ git remote -v
all     https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (fetch)
all     https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (push)
origin  https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (fetch)
origin  https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (push)

### Add the github repo to the remote all
2) git remote set-url --add --push all https://github.com/nbrest/java.web.mobile.inspections.git

$ git remote -v
all     https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (fetch)
all     https://github.com/nbrest/java.web.mobile.inspections.git (push)
origin  https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (fetch)
origin  https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (push)

### Add the private repo to the remote all
3) git remote set-url --add --push all https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git

$ git remote -v
all     https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (fetch)
all     https://github.com/nbrest/java.web.mobile.inspections.git (push)
all     https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (push)
origin  https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (fetch)
origin  https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (push)

### Create a remote named github to be able to push only to github (I shouldn´t have to use this though)
4) git remote add github https://github.com/nbrest/java.web.mobile.inspections.git

$ git remote -v
all     https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (fetch)
all     https://github.com/nbrest/java.web.mobile.inspections.git (push)
all     https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (push)
github  https://github.com/nbrest/java.web.mobile.inspections.git (fetch)
github  https://github.com/nbrest/java.web.mobile.inspections.git (push)
origin  https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (fetch)
origin  https://www.nicobrest.com.ar/git/java.web.mobile.inspections.git (push)

### Usage ###########################################################
git checkout -b dev
git add File.java
git rm File.java
git commit -m "Commit message"

git push all master
git push all dev

git push origin master
git push origin dev

git push github master
git push github dev

### Options #########################################################

* Store git credentials for future use (in plain text format! default file $HOME/.git-credentials)
	git config credential.helper store
	git config credential.helper store --file fileName

* Disable https certificate validation:
	http.sslVerify = false

### Merge dev to master #############################################
	on dev:
1) git merge master 
	merge master changes into the dev branch, fix any conflicts and commit the fixes on dev.
	
2) git checkout master
	switch to the master branch

3) git merge dev
	there should be no conflicts on this merge because they were all fixed in the dev branch on step 1

### Tags ############################################################
# Make the tags from the master branch (not sure if it affects though, because you tag a commit)

	* List tags: git tag

	* Show tag info: 
git show tagName
	ej: git show v0.1

	* Create a tag: 
git tag -a v0.1 -m "My tag v0.1"

	* Push tags: 
git push all v0.1
git push origin v0.1
git push github v0.1

	* Push all tags:
git push all --tags
git push origin --tags
git push github --tags

	* Checking out tags: You can´t! But you can create a new branch and checkout the code of the tag version there
git checkout -b branchName tagName
ej: git checkout -b stableVersion v0.1

### Branches ########################################################

* List branches:
git branch -v

* Create branch:
git checkout -b branchName

* Push the branches:
git push all branchName
git push origin branchName
git push github branchName

* Delete branch: (local)
	if branchName was merged with the current branch and is safe to delete
git branch -d branchName
	if branchName wasn´t merged yet with the current branch and is NOT safe to delete, you can force it with -D
git branch -D branchName

* Push the deletes:
git push all 
git push origin 
git push github 

### .gitignore ######################################################

Use the sample version gitignore_example.txt for my projects

### Stash ###########################################################
# Save work in progress in a stack so that I don´t loose it and can switch branches without having to commit half finished work

* Add work in progress to the stack and leave working copy clean:
	git stash

* List stashed work:
	git stash list
	
* Apply stashed work:
	git stash apply (applies the latest stashed work but leaves all files unstaged for commit)
	git stash apply --index (this one leaves the working copy exactly as it was when it was stashed. applies the latest stashed work and tries to stage for commit the previously staged changes in the stash)
	
* Remove a stashed work from the stack:
	git stash drop stash@{9} (Drops the stashed work number 9 in the stack)
	
* Apply stash and drop it:
	git stash pop stash@{9}

* Apply stashed changes into a new branch for testing stashed work:
	git stash branch newBranchName (Creates a new branch named newBranchName and sets the working copy as it was when the stash was created in that new branch)

### Reset changes ###################################################
# git reset: resets the head to a specific commit (if no commit is specified, it resets it to the current head)
# HEAD: Snapshot of the last commit

* Reset the head to a specific commit(not useful if you don´t specify a commit)
	git reset --soft commitHash
	git reset --soft

* Clean working copy, reset (and loose) all changes made:
	git reset --hard

* Unstage all changes (default action of git reset): 
	git reset --mixed (it doesn´t remove the changes from the code, but leaves those changes unstaged for commit)

# FILE LEVEL RESETS: --soft --mixed --hard have no effect here
	# Working directory changes are NOT updated with git reset on file level, only the revision, the changes remain there, unstaged for commit
	git reset HEAD~2 foo.java (updates the staged snapshot to match the specified commit)
	git reset HEAD foo.java (commonly used with HEAD than with any other commit)
	
	# Working directory changes are updated using checkout instead of reset
	git checkout HEAD foo.java (resets both the staged snapshot and the working copy of the specified file to the HEAD version. This is what I should use to revert the changes of a file to a previous commit)
	git checkout HEAD~2 foo.java (reverts a file to the 2nd last commit before HEAD)
	
### Revert changes ##################################################
# git revert: Undoes changes in a commit by creating a new commit where it removes the changes from the last commit, setting it back to the 2nd last commit
# RULE: Use git reset to undo UNCOMMITED changes and use git revert to undo COMMITED changes

* Revert last committed changes to the 2nd last commit:
	git revert HEAD~2


	
	
